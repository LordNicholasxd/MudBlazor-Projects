@page "/"
@using MudBlazor
@inject NavigationManager Navigation
<PageTitle>Home</PageTitle>

<div class="fundoImagem"></div>

<MudGrid Class="conteudo">
  @foreach (var funcionariosAgrupados in setoresAgrupados)
  {
    <MudItem xs="12" sm="6" md="4" lg="3">
      <MudCard Class="mud-card">
        <MudCardHeader Class="mud-card-header">
          <MudText Typo="Typo.h6" Class="mud-text-setor">@funcionariosAgrupados.Setor</MudText>
        </MudCardHeader>
        <MudCardContent Class="mud-card-content">
          @foreach (var funcionario in funcionariosAgrupados.FuncionariosAgrupados)
          {
            <MudText Typo="Typo.body2" Class="mud-text">
              <span class="mud-text-ramal">@funcionario.Ramal - </span>

              <span class="mud-text-funcionarios">@funcionario.Funcionarios</span>
            </MudText>
          }
        </MudCardContent>
      </MudCard>
    </MudItem>
  }
</MudGrid>

@code {
  private List<Ramall> ramais = new List<Ramall>();
  private List<(string Setor, List<(string Ramal, string Funcionarios)> FuncionariosAgrupados)> setoresAgrupados = new List<(string Setor, List<(string Ramal, string Funcionarios)> FuncionariosAgrupados)>();

  protected override async Task OnInitializedAsync()
  {
    ramais = await _context.Ramais.ToListAsync();

    setoresAgrupados = ramais
        .GroupBy(r => r.Setor)
        .Select(setorGroup => (
            Setor: setorGroup.Key,
            FuncionariosAgrupados: setorGroup
                .GroupBy(r => r.NumeroRamall)
                .Select(ramalGroup => (
                    Ramal: ramalGroup.Key,
                    Funcionarios: string.Join(", ", ramalGroup.Select(f => f.Funcionarios))
                ))
                .OrderBy(r => r.Funcionarios)
                .ToList()
        ))
        .OrderBy(r => r.Setor)
        .ToList();
  }
}
